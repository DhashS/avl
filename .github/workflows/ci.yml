name: AVL CI
on: [push]
jobs:
  build-plotlib:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        prescision: [sp, dp]
        os: [linux, macos, windows]
        arch: [x86_64, arm64]
        toolchain:
          - {compiler: gcc, version: 11}
          - {compiler: intel-classic, version: "2021.10"}
        exclude:
          - os: windows
            arch: arm64
    steps:
      - uses: actions/checkout@v4
        id: checkout-repo

      - uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}

      - name: setup cross compilers
        id: cross-compile-toolchain
        env:
          OS: ${{ matrix.os }}
          BUILDFOR: ${{ matrix.arch }}
          COMPILER: ${{ matrix.toolchain.compiler }}
        run: |
          set +x
          sudo apt install libx11-dev
          if [ $OS = "windows" ]; then
            if [ $BUILDFOR = "x86_64" ]; then
              if [ $COMPILER = "gcc" ]; then
                sudo apt install gfortran-mingw-w64-x86-64 gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64
                sudo cp -r /usr/include/X11 /usr/lib/gcc/x86_64-w64-mingw32/10-win32/include
              fi
            fi
          elif [ $OS = "macos" ]; then
            echo "not implemented"
          elif [ $OS = "linux" ]; then
            if [ $BUILDFOR = "arm64" ]; then
              if [ $COMPILER = "gcc" ]; then
                sudo apt install gfortran-aarch64-linux-gnu gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
              fi
            fi
          fi

      - name: compile plotlib
        run: |
          cd plotlib
          if [[ $FC == "gfortran" ]]; then
            export FC_NAME="gfortran"
          elif [[ $FC == "ifort" ]]; then
            export FC_NAME="ifort"
          fi
          if [ $OS = "windows" ]; then
            if [ $BUILDFOR = "x86_64" ]; then
              if [ $COMPILER = "gcc" ]; then
                export FC=$(which x86_64-w64-mingw32-gfortran)
                export CC=$(which x86_64-w64-mingw32-gcc)
                export CXX=$(which x86_64-w64-mingw32-g++)
              fi
            fi
          elif [ $OS = "macos" ]; then
            echo "not implemented"
          elif [ $OS = "linux" ]; then
            if [ $BUILDFOR = "arm64" ]; then
              if [ $COMPILER = "gcc" ]; then
                export FC=$(which aarch64-linux-gnu-gfortran)
                export CC=$(which aarch64-linux-gnu-gcc)
                export CXX=$(which aarch64-linux-gnu-g++)
              fi
            fi
          fi
          if [ $FLONUM = "dp" ]; then
            printf "%sDP FC=$FC CC=$CC PLTLIB=libPlt_%s_%s_%s_%s.a DP=\"-fdefault-real-8\"" $FC_NAME $FC_NAME $FLONUM $OS $BUILDFOR | xargs make
          else
            printf "%s FC=$FC CC=$CC PLTLIB=libPlt_%s_%s_%s_%s.a DP=\"\"" $FC_NAME $FC_NAME $FLONUM $OS $BUILDFOR | xargs make
          fi
          export PLTOBJ="libPlt_$FC_NAME_$FLONUM_$OS_$BUILDFOR.a"
          cd ../eispack
          if [ $FLONUM = "dp" ]; then
            printf "FC=$FC CC=$CC EISLIB=eispack_%s_%s_%s_%s.a SRC=eispackDP.f BIN=eispackDP.o DP=\"-fdefault-real-8\"" $FC_NAME $FLONUM $OS $BUILDFOR $FC_NAME $FLONUM $OS $BUILDFOR | xargs make -f Makefile.mingw
          else
            printf "FC=$FC CC=$CC EISLIB=eispack_%s_%s_%s_%s.a SRC=eispack.f BIN=eispack.o D=\"\"" $FC_NAME $FLONUM $OS $BUILDFOR $FC_NAME $FLONUM $OS $BUILDFOR | xargs make -f Makefile.mingw
          fi
          export EIGOBJ="eispack_$FC_NAME_$FLONUM_$OS_$BUILDFOR.a"
          cd ../bin
          if [ $OS = "windows" ]; then
            printf "FC=$FC CC=$CC PLTOBJ=$PLTOBJ EIGOBJ=$EIGOBJ" | xargs make -f Makefile.mingw
          elif [ $FC = "gfortran" ]; then
            printf "FC=$FC CC=$CC PLTOBJ=$PLTOBJ EIGOBJ=$EIGOBJ" | xargs make -f Makefile.gfortran
          elif [ $FC = "ifort" ]; then
            printf "FC=$FC CC=$CC PLTOBJ=$PLTOBJ EIGOBJ=$EIGOBJ" | xargs make -f Makefile.ifort
          fi


        env:
          BUILDFOR: ${{ matrix.arch }}
          FLONUM: ${{ matrix.prescision }}
          OS: ${{ matrix.os }}
          COMPILER: ${{ matrix.toolchain.compiler }}

      - uses: actions/upload-artifact@v3
        with:
          name: libPlt_${{ env.FC }}_${{ matrix.prescision }}_${{ matrix.os }}_${{ matrix.arch }}.a
          path: |
            eispack/eispack_${{ env.FC }}_${{ matrix.prescision }}_${{ matrix.os }}_${{ matrix.arch }}.a

      - uses: actions/upload-artifact@v3
        with:
          name: eispack_${{ env.FC }}_${{ matrix.prescision }}_${{ matrix.os }}_${{ matrix.arch }}.a
          path: |
            eispack/eispack_${{ env.FC }}_${{ matrix.prescision }}_${{ matrix.os }}_${{ matrix.arch }}.a
